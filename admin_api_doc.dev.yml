openapi: "3.0.2"
info:
  title: Octalogic Portfolio Dev API Server
  version: "1.0"
servers:
  - url: https://us-central1-octalogic-portfolio-dev.cloudfunctions.net/api/v1/admin
    description: Development Server
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Category:
      type: object
      properties:
        id:
          type: string
          description: unique identifier for the category
          example: 31765c4c-2606-4e1b-a613-7866212a86b6
        name:
          type: string
          description: category name
          example: Web Development
        createdAt:
          type: string
          description: created at ISO string
          example: "2019-10-13T07:47:09.376Z"
        updatedAt:
          type: string
          description: updated at ISO string
          example: "2019-10-13T07:47:09.376Z"
    Client:
      type: object
      properties:
        id:
          type: string
          description: unique identifier for the category
          example: 31765c4c-2606-4e1b-a613-7866212a86b6
        name:
          type: string
          description: client name
          example: John Doe
        address:
          type: string
          description: address of the client
          example: India
        createdAt:
          type: string
          description: created at ISO string
          example: "2019-10-13T07:47:09.376Z"
        updatedAt:
          type: string
          description: updated at ISO string
          example: "2019-10-13T07:47:09.376Z"
    Technology:
      type: object
      properties:
        id:
          type: string
          description: unique identifier for the technology
          example: 31765c4c-2606-4e1b-a613-7866212a86b6
        name:
          type: string
          description: technology name
          example: Node JS
        category:
          $ref: "#/components/schemas/Category"
        createdAt:
          type: string
          description: created at ISO string
          example: "2019-10-13T07:47:09.376Z"
        updatedAt:
          type: string
          description: updated at ISO string
          example: "2019-10-13T07:47:09.376Z"
    CloudStorageObject:
      type: object
      properties:
        selfLink:
          type: string
          description: private link to the image on google cloud
          example: https://www.googleapis.com/storage/v1/b/octalogic/o/public%2Fimages%2Fe140073a-092e-48dd-8159-c0a67b617894/acl/allUsers
        bucket:
          type: string
          description: bucket name that contains the image
          example: octalogic
        object:
          type: string
          description: path to the image
          example: public/images/e140073a-092e-48dd-8159-c0a67b617894
        id:
          type: string
          description: google cloud id for the image
          example: octalogic/public/images/e140073a-092e-48dd-8159-c0a67b617894/1572794432393307/allUsers
        role:
          type: string
          description: role assigned to the iamge
          example: READER
        kind:
          type: string
          example: storage#objectAccessControl
        etag:
          type: string
          example: CNugyuurzuUCEAI=
        entity:
          type: string
          example: allUsers
        generation:
          type: string
          example: 1572794432393307
    Project:
      type: object
      properties:
        id:
          type: string
          description: unique identifier for the project
          example: 31765c4c-2606-4e1b-a613-7866212a86b6
        name:
          type: string
          description: project name
          example: Order For Me
        cover:
          type: object
          properties:
            link:
              type: string
              description: public link for the cover image
              example: https://storage.googleapis.com/octalogic/public/images/e140073a-092e-48dd-8159-c0a67b617894
            meta:
              $ref: "#/components/schemas/CloudStorageObject"
        logo:
          type: object
          properties:
            link:
              type: string
              description: public link for the logo image
              example: https://storage.googleapis.com/octalogic/public/images/e140073a-092e-48dd-8159-c0a67b617894
            meta:
              $ref: "#/components/schemas/CloudStorageObject"
        client:
          type: object
          $ref: "#/components/schemas/Client"
        startDate:
          type: string
          description: project start date ISO string
          example: "2019-10-13T07:47:09.376Z"
        endDate:
          type: string
          description: project end date ISO string
          example: "2019-10-13T07:47:09.376Z"
        cost:
          type: number
          description: cost of the project
          example: 150000
        currency:
          type: string
          description: currency the project was billed in
          example: $
        createdAt:
          type: string
          description: created at ISO string
          example: "2019-10-13T07:47:09.376Z"
        updatedAt:
          type: string
          description: updated at ISO string
          example: "2019-10-13T07:47:09.376Z"
    ItemInsertUpdateResponse:
      type: object
      properties:
        payload:
          type: object
          properties:
            id:
              type: string
              description: id of the item that was inserted/updated
              example: 31765c4c-2606-4e1b-a613-7866212a86b6
            message:
              type: string
              description: message for the operation
              example: Successfully Added
    FileUploadResponse:
      type: object
      properties:
        payload:
          type: object
          properties:
            message:
              type: string
              description: message for the operation
              example: Successfully uploaded
    FileDeleteResponse:
      type: object
      properties:
        payload:
          type: object
          properties:
            message:
              type: string
              description: message for the operation
              example: Successfully deleted
    Unauthorized:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
              description: HTTP status code
              example: 403
            message:
              type: string
              example: Missing Authorization Credentials
    GenericStringRequestBody:
      type: string
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: HTTP status code
        application_code:
          type: integer
          format: int32
          description: Application specific code
        message:
          type: string
        stack:
          type: object
          description: stack trace or empty object depending on the environment
  responses:
    Error:
      description: General Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnauthorizedError:
      description: Unauthorized Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Unauthorized"
    InsertUpdateResponse:
      description: Successfull insert or update response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ItemInsertUpdateResponse"
    FileUploadSuccess:
      description: Successfull uploaded a file
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileUploadResponse"
    FileDeleteSuccess:
      description: Successfull deleted a file
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileDeleteResponse"
  parameters:
    updateDelete:
      in: path
      name: id
      required: true
      schema:
        type: string
        description: id of the item that is being deleted or updated
        example: 31765c4c-2606-4e1b-a613-7866212a86b6
    projectId:
      in: path
      name: projectId
      required: true
      schema:
        type: string
        description: id of the project that is being modified
        example: 31765c4c-2606-4e1b-a613-7866212a86b6
paths:
  /category:
    get:
      tags:
        - category
      description: Fetches all categories in the system
      summary: Fetches all categories in the system
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - category
      description: Insert a category
      summary: Insert a category
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
              required:
                - name
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /category/{id}:
    put:
      tags:
        - category
      description: Update a category
      summary: Update a category
      parameters:
        - $ref: "#/components/parameters/updateDelete"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
              required:
                - name
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - category
      description: Delete a category
      summary: Delete a category
      parameters:
        - $ref: "#/components/parameters/updateDelete"
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /technology:
    get:
      tags:
        - technology
      description: Fetches all technologies in the system
      summary: Fetches all technologies in the system
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Technology"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - technology
      description: Insert a technology
      summary: Insert a technology
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                categoryId:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                link:
                  type: string
                  description: link to the technology homepage
              required:
                - name
                - categoryId
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /technology/{id}:
    put:
      tags:
        - technology
      description: Update a technology
      summary: Update a technology
      parameters:
        - $ref: "#/components/parameters/updateDelete"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                categoryId:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                link:
                  type: string
                  description: link to the technology homepage
              required:
                - name
                - categoryId
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - technology
      description: Delete a technology
      summary: Delete a technology
      parameters:
        - $ref: "#/components/parameters/updateDelete"
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /client:
    get:
      tags:
        - client
      description: Fetches all clients in the system
      summary: Fetches all clients in the system
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Client"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - client
      description: add a client
      summary: add a client
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                address:
                  $ref: "#/components/schemas/GenericStringRequestBody"
              required:
                - name
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /client/{id}:
    put:
      tags:
        - client
      description: Update a clients details
      summary: Update a clients details
      parameters:
        - $ref: "#/components/parameters/updateDelete"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                address:
                  $ref: "#/components/schemas/GenericStringRequestBody"
              required:
                - name
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - client
      description: Delete a client
      summary: Delete a client
      parameters:
        - $ref: "#/components/parameters/updateDelete"
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /project:
    get:
      tags:
        - project
      description: Fetches all projects in the system
      summary: Fetches all projects in the system
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - project
      description: Quick add a project
      summary: Quick add a project, this is the initial call that needs to be made in order to create a project in the system.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                clientId:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                startDate:
                  type: string
                  description: ISO string start date of the project
                  example: "2019-10-13T07:47:09.376Z"
                endDate:
                  type: string
                  description: ISO string end date of the project
                  example: "2019-10-13T07:47:09.376Z"
                cost:
                  type: number
                  description: total cost for the project
                currency:
                  type: string
                  description: currency for the project
              required:
                - name
                - clientId
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /project/{projectId}:
    get:
      tags:
        - project
      description: fetch a single project in the system
      summary: fetch a single project in the system
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    $ref: "#/components/schemas/Project"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - project
      description: Archive a project
      summary: Archives a project and deletes all related media
      parameters:
        - $ref: "#/components/parameters/projectId"
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /project/cover/{projectId}:
    post:
      tags:
        - project
      description: Add a cover image to an existing project
      summary: Add a cover image to an existing project, this will overwrite any existing cover image
      parameters:
        - $ref: "#/components/parameters/projectId"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                cover:
                  format: binary
                  description: image file for the cover
              required:
                - cover
      responses:
        200:
          $ref: "#/components/responses/FileUploadSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - project
      description: Delete a cover image for a project
      summary: Delete a cover image for a project
      parameters:
        - $ref: "#/components/parameters/projectId"
      responses:
        200:
          $ref: "#/components/responses/FileDeleteSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /project/logo/{projectId}:
    post:
      tags:
        - project
      description: Add a logo image to an existing project
      summary: Add a logo image to an existing project, this will overwrite any existing logo image
      parameters:
        - $ref: "#/components/parameters/projectId"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                cover:
                  format: binary
                  description: image file for the logo
              required:
                - cover
      responses:
        200:
          $ref: "#/components/responses/FileUploadSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - project
      description: Delete a logo image for a project
      summary: Delete a logo image for a project
      parameters:
        - $ref: "#/components/parameters/projectId"
      responses:
        200:
          $ref: "#/components/responses/FileDeleteSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
