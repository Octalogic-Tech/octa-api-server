openapi: "3.0.2"
info:
  title: Octalogic Portfolio Admin API Server
  version: "1.0"
  x-logo:
    url: "https://octalogic.in/public/images/logos/octalogic.svg"
    backgroundColor: "#FFFFFF"
    altText: "Octalogic logo"
    href: "https://octalogic.in/contact"
servers:
  - url: https://us-central1-octalogic-portfolio-dev.cloudfunctions.net/api/v1/admin
    description: Development Server
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Category:
      type: object
      properties:
        id:
          type: string
          description: unique identifier for the category
          example: 31765c4c-2606-4e1b-a613-7866212a86b6
        name:
          type: string
          description: category name
          example: Web Development
        icon:
          type: object
          properties:
            type:
              type: string
              description: the type of icon
              example: mdi
            name:
              type: string
              description: name of the icon
              example: clock
        createdAt:
          type: string
          description: created at ISO string
          example: "2019-10-13T07:47:09.376Z"
        updatedAt:
          type: string
          description: updated at ISO string
          example: "2019-10-13T07:47:09.376Z"
    Client:
      type: object
      properties:
        id:
          type: string
          description: unique identifier for the category
          example: 31765c4c-2606-4e1b-a613-7866212a86b6
        name:
          type: string
          description: client name
          example: John Doe
        address:
          type: string
          description: address of the client
          example: India
        createdAt:
          type: string
          description: created at ISO string
          example: "2019-10-13T07:47:09.376Z"
        updatedAt:
          type: string
          description: updated at ISO string
          example: "2019-10-13T07:47:09.376Z"
    Technology:
      type: object
      properties:
        id:
          type: string
          description: unique identifier for the technology
          example: 31765c4c-2606-4e1b-a613-7866212a86b6
        name:
          type: string
          description: technology name
          example: Node JS
        icon:
          type: object
          properties:
            type:
              type: string
              description: the type of icon
              example: mdi
            name:
              type: string
              description: name of the icon
              example: clock
        category:
          $ref: "#/components/schemas/Category"
        createdAt:
          type: string
          description: created at ISO string
          example: "2019-10-13T07:47:09.376Z"
        updatedAt:
          type: string
          description: updated at ISO string
          example: "2019-10-13T07:47:09.376Z"
    CloudStorageObject:
      type: object
      properties:
        selfLink:
          type: string
          description: private link to the image on google cloud
          example: https://www.googleapis.com/storage/v1/b/octalogic/o/public%2Fimages%2Fe140073a-092e-48dd-8159-c0a67b617894/acl/allUsers
        bucket:
          type: string
          description: bucket name that contains the image
          example: octalogic
        object:
          type: string
          description: path to the image
          example: public/images/e140073a-092e-48dd-8159-c0a67b617894
        id:
          type: string
          description: google cloud id for the image
          example: octalogic/public/images/e140073a-092e-48dd-8159-c0a67b617894/1572794432393307/allUsers
        role:
          type: string
          description: role assigned to the iamge
          example: READER
        kind:
          type: string
          example: storage#objectAccessControl
        etag:
          type: string
          example: CNugyuurzuUCEAI=
        entity:
          type: string
          example: allUsers
        generation:
          type: string
          example: 1572794432393307
    GalleryItem:
      type: object
      properties:
        id:
          type: string
          description: unique identifier for the gallery item
          example: 31765c4c-2606-4e1b-a613-7866212a86b6
        name:
          type: string
          description: optional name given to the gallery item
          example: Mobile
        description:
          type: string
          description: optional description for the gallery item
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit
        link:
          type: string
          description: public link for the cover image
          example: https://storage.googleapis.com/octalogic/public/images/e140073a-092e-48dd-8159-c0a67b617894
        meta:
          $ref: "#/components/schemas/CloudStorageObject"
    Project:
      type: object
      properties:
        id:
          type: string
          description: unique identifier for the project
          example: 31765c4c-2606-4e1b-a613-7866212a86b6
        name:
          type: string
          description: project name
          example: Order For Me
        cover:
          type: object
          properties:
            link:
              type: string
              description: public link for the cover image
              example: https://storage.googleapis.com/octalogic/public/images/e140073a-092e-48dd-8159-c0a67b617894
            meta:
              $ref: "#/components/schemas/CloudStorageObject"
        logo:
          type: object
          properties:
            link:
              type: string
              description: public link for the logo image
              example: https://storage.googleapis.com/octalogic/public/images/e140073a-092e-48dd-8159-c0a67b617894
            meta:
              $ref: "#/components/schemas/CloudStorageObject"
        gallery:
          type: array
          items:
            $ref: "#/components/schemas/GalleryItem"
        client:
          type: object
          $ref: "#/components/schemas/Client"
        startDate:
          type: string
          description: project start date ISO string
          example: "2019-10-13T07:47:09.376Z"
        endDate:
          type: string
          description: project end date ISO string
          example: "2019-10-13T07:47:09.376Z"
        cost:
          type: number
          description: cost of the project
          example: 150000
        currency:
          type: string
          description: currency the project was billed in
          example: $
        createdAt:
          type: string
          description: created at ISO string
          example: "2019-10-13T07:47:09.376Z"
        updatedAt:
          type: string
          description: updated at ISO string
          example: "2019-10-13T07:47:09.376Z"
    Component:
      type: object
      properties:
        id:
          type: string
          description: unique identifier for the component
          example: 31765c4c-2606-4e1b-a613-7866212a86b6
        name:
          type: string
          description: component name
          example: Mobile Component
        summary:
          type: string
          description: summary for the component
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit
        description:
          type: string
          description: long description for the component
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        cover:
          type: object
          properties:
            link:
              type: string
              description: public link for the cover image
              example: https://storage.googleapis.com/octalogic/public/images/e140073a-092e-48dd-8159-c0a67b617894
            meta:
              $ref: "#/components/schemas/CloudStorageObject"
        logo:
          type: object
          properties:
            link:
              type: string
              description: public link for the logo image
              example: https://storage.googleapis.com/octalogic/public/images/e140073a-092e-48dd-8159-c0a67b617894
            meta:
              $ref: "#/components/schemas/CloudStorageObject"
        category:
          type: object
          $ref: "#/components/schemas/Category"
        project:
          type: object
          $ref: "#/components/schemas/Project"
        technology:
          type: array
          items:
            $ref: "#/components/schemas/Technology"
        links:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: type of link ie, app store, blog post, article
                example: blog
              url:
                type: string
                description: url for the link
                example: https://google.com
              text:
                type: string
                description: Text to display for the link
                example: Google
        createdAt:
          type: string
          description: created at ISO string
          example: "2019-10-13T07:47:09.376Z"
        updatedAt:
          type: string
          description: updated at ISO string
          example: "2019-10-13T07:47:09.376Z"
    Portfolio:
      type: object
      properties:
        id:
          type: string
          description: unique identifier for the portfolio
          example: 31765c4c-2606-4e1b-a613-7866212a86b6
        title:
          type: string
          description: portfolio name
          example: Mobile Portfolio
        code:
          type: string
          description: unique code for the portfolio link
          example: yXbXwlBxfp
        description:
          type: string
          description: long description for the portfolio
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        components:
          type: array
          items:
            $ref: "#/components/schemas/Component"
        createdAt:
          type: string
          description: created at ISO string
          example: "2019-10-13T07:47:09.376Z"
        updatedAt:
          type: string
          description: updated at ISO string
          example: "2019-10-13T07:47:09.376Z"
    PortfolioAll:
      type: object
      properties:
        id:
          type: string
          description: unique identifier for the portfolio
          example: 31765c4c-2606-4e1b-a613-7866212a86b6
        title:
          type: string
          description: portfolio name
          example: Mobile Portfolio
        code:
          type: string
          description: unique code for the portfolio link
          example: yXbXwlBxfp
        description:
          type: string
          description: long description for the portfolio
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        category:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: unique identifier for the category
                example: 31765c4c-2606-4e1b-a613-7866212a86b6
              name:
                type: string
                description: name of the category
                example: Mobile Development
        component:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: unique identifier for the component
                example: 31765c4c-2606-4e1b-a613-7866212a86b6
              name:
                type: string
                description: name of the component
                example: Components 1
        project:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: unique identifier for the project
                example: 31765c4c-2606-4e1b-a613-7866212a86b6
              name:
                type: string
                description: name of the project
                example: Project A
        technology:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: unique identifier for the technology
                example: 31765c4c-2606-4e1b-a613-7866212a86b6
              name:
                type: string
                description: name of the technology
                example: Node JS
        createdAt:
          type: string
          description: created at ISO string
          example: "2019-10-13T07:47:09.376Z"
        updatedAt:
          type: string
          description: updated at ISO string
          example: "2019-10-13T07:47:09.376Z"
    SelectObject:
      type: object
      properties:
        id:
          type: string
          description: unique identifier for the item
          example: 31765c4c-2606-4e1b-a613-7866212a86b6
        name:
          type: string
          description: name of the item
          example: Mobile

    ItemInsertUpdateResponse:
      type: object
      properties:
        payload:
          type: object
          properties:
            id:
              type: string
              description: id of the item that was inserted/updated
              example: 31765c4c-2606-4e1b-a613-7866212a86b6
            message:
              type: string
              description: message for the operation
              example: Successfully Added/Updated
    FileUploadResponse:
      type: object
      properties:
        payload:
          type: object
          properties:
            message:
              type: string
              description: message for the operation
              example: Successfully uploaded
    FileDeleteResponse:
      type: object
      properties:
        payload:
          type: object
          properties:
            message:
              type: string
              description: message for the operation
              example: Successfully deleted
    Unauthorized:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
              description: HTTP status code
              example: 401
            message:
              type: string
              example: Missing Authorization Credentials
    MissingParameters:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
              description: HTTP status code
              example: 422
            message:
              type: string
              example: Request has missing parameters
    ClientNotFound:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
              description: HTTP status code
              example: 404
            message:
              type: string
              example: Client does not exist
    CategoryNotFound:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
              description: HTTP status code
              example: 404
            message:
              type: string
              example: Category does not exist
    ProjectNotFound:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
              description: HTTP status code
              example: 404
            message:
              type: string
              example: Project does not exist
    ComponentNotFound:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
              description: HTTP status code
              example: 404
            message:
              type: string
              example: Component does not exist
    EntityNotFound:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
              description: HTTP status code
              example: 404
            message:
              type: string
              example: Entity not found
    GenericStringRequestBody:
      type: string
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: HTTP status code
        application_code:
          type: integer
          format: int32
          description: Application specific code
        message:
          type: string
        stack:
          type: object
          description: stack trace or empty object depending on the environment
  responses:
    Error:
      description: General Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnauthorizedError:
      description: Unauthorized Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Unauthorized"
    MissingParametersError:
      description: Missing Parameters Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MissingParameters"
    ClientNotFoundError:
      description: Client Not Found Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientNotFound"
    CategoryNotFoundError:
      description: Category Not Found Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CategoryNotFound"
    ProjectNotFoundError:
      description: Project Not Found Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProjectNotFound"
    ComponentNotFoundError:
      description: Component Not Found Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ComponentNotFound"
    EntityNotFoundError:
      description: Entity Not Found Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EntityNotFound"
    InsertUpdateResponse:
      description: Successfull insert or update response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ItemInsertUpdateResponse"
    FileUploadSuccess:
      description: Successfull uploaded a file
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileUploadResponse"
    FileDeleteSuccess:
      description: Successfull deleted a file
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileDeleteResponse"
  parameters:
    updateDelete:
      in: path
      name: id
      required: true
      schema:
        type: string
        description: id of the item that is being deleted or updated
        example: 31765c4c-2606-4e1b-a613-7866212a86b6
    projectId:
      in: path
      name: projectId
      required: true
      schema:
        type: string
        description: id of the project that is being modified
        example: 31765c4c-2606-4e1b-a613-7866212a86b6
    galleryId:
      in: path
      name: galleryId
      required: true
      schema:
        type: string
        description: id of the gallery item that is being modified
        example: 31765c4c-2606-4e1b-a613-7866212a86b6
    componentId:
      in: path
      name: componentId
      required: true
      schema:
        type: string
        description: id of the project that is being modified
        example: 31765c4c-2606-4e1b-a613-7866212a86b6
    portfolioId:
      in: path
      name: portfolioId
      required: true
      schema:
        type: string
        description: id of the portfolio that is being modified
        example: 31765c4c-2606-4e1b-a613-7866212a86b6
paths:
  /category:
    get:
      tags:
        - category
      description: Fetches all categories in the system
      summary: Fetches all categories in the system
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - category
      description: Insert a category
      summary: Insert a category
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                icon_type:
                  type: string
                  description: the type of icon ie, mdi, fa
                icon_name:
                  type: string
                  description: name of the icon
              required:
                - name
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /category/{id}:
    put:
      tags:
        - category
      description: Update a category
      summary: Update a category
      parameters:
        - $ref: "#/components/parameters/updateDelete"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                icon_type:
                  type: string
                  description: the type of icon ie, mdi, fa
                icon_name:
                  type: string
                  description: name of the icon
              required:
                - name
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/EntityNotFoundError"
    delete:
      tags:
        - category
      description: Delete a category
      summary: Delete a category
      parameters:
        - $ref: "#/components/parameters/updateDelete"
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/EntityNotFoundError"
  /technology:
    get:
      tags:
        - technology
      description: Fetches all technologies in the system
      summary: Fetches all technologies in the system
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Technology"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - technology
      description: Insert a technology
      summary: Insert a technology
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                category:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                link:
                  type: string
                  description: link to the technology homepage
                icon_type:
                  type: string
                  description: the type of icon ie, mdi, fa
                icon_name:
                  type: string
                  description: name of the icon
              required:
                - name
                - category
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /technology/{id}:
    put:
      tags:
        - technology
      description: Update a technology
      summary: Update a technology
      parameters:
        - $ref: "#/components/parameters/updateDelete"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                category:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                link:
                  type: string
                  description: link to the technology homepage
                icon_type:
                  type: string
                  description: the type of icon ie, mdi, fa
                icon_name:
                  type: string
                  description: name of the icon
              required:
                - name
                - category
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/EntityNotFoundError"
    delete:
      tags:
        - technology
      description: Delete a technology
      summary: Delete a technology
      parameters:
        - $ref: "#/components/parameters/updateDelete"
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/EntityNotFoundError"
  /client:
    get:
      tags:
        - client
      description: Fetches all clients in the system
      summary: Fetches all clients in the system
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Client"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - client
      description: add a client
      summary: add a client
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                address:
                  $ref: "#/components/schemas/GenericStringRequestBody"
              required:
                - name
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /client/{id}:
    put:
      tags:
        - client
      description: Update a clients details
      summary: Update a clients details
      parameters:
        - $ref: "#/components/parameters/updateDelete"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                address:
                  $ref: "#/components/schemas/GenericStringRequestBody"
              required:
                - name
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/EntityNotFoundError"
    delete:
      tags:
        - client
      description: Delete a client
      summary: Delete a client
      parameters:
        - $ref: "#/components/parameters/updateDelete"
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/EntityNotFoundError"
  /project:
    get:
      tags:
        - project
      description: Fetches all projects in the system
      summary: Fetches all projects in the system
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - project
      summary: Quick add a project
      description: Quick add a project, this is the initial call that needs to be made in order to create a project in the system.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                clientId:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                startDate:
                  type: string
                  description: ISO string start date of the project
                  example: "2019-10-13T07:47:09.376Z"
                endDate:
                  type: string
                  description: ISO string end date of the project
                  example: "2019-10-13T07:47:09.376Z"
                cost:
                  type: number
                  description: total cost for the project
                currency:
                  type: string
                  description: currency for the project
              required:
                - name
                - clientId
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /project/{projectId}:
    get:
      tags:
        - project
      description: fetch a single project in the system
      summary: fetch a single project in the system
      parameters:
        - $ref: "#/components/parameters/projectId"
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    $ref: "#/components/schemas/Project"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/EntityNotFoundError"
    put:
      tags:
        - project
      description: updates the text attributes only of a project, cover, logo and gallery are updated in their own endpoints
      summary: updates the text attributes only of a project
      parameters:
        - $ref: "#/components/parameters/projectId"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                clientId:
                  $ref: "#/components/schemas/GenericStringRequestBody"
                startDate:
                  type: string
                  description: ISO string start date of the project
                  example: "2019-10-13T07:47:09.376Z"
                endDate:
                  type: string
                  description: ISO string end date of the project
                  example: "2019-10-13T07:47:09.376Z"
                cost:
                  type: number
                  description: total cost for the project
                currency:
                  type: string
                  description: currency for the project
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Error thrown when the client or the project does not exist
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/responses/ClientNotFoundError"
                  - $ref: "#/components/responses/ProjectNotFoundError"
              examples:
                clientNotFound:
                  summary: Client does not exist error
                  value:
                    code: 404
                    message: Client does not exist
                ProjectNotFound:
                  summary: Project does not exist error
                  value:
                    code: 404
                    message: Project does not exist
    delete:
      tags:
        - project
      description: Archive a project
      summary: Archives a project and deletes all related media
      parameters:
        - $ref: "#/components/parameters/projectId"
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/EntityNotFoundError"
  /project/{projectId}/logo:
    post:
      tags:
        - project
      summary: Add a logo image to an existing project
      description: Add a logo image to an existing project, this will overwrite any existing logo image
      parameters:
        - $ref: "#/components/parameters/projectId"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                logo:
                  format: binary
                  description: image file for the logo
              required:
                - cover
      responses:
        200:
          $ref: "#/components/responses/FileUploadSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/EntityNotFoundError"
    delete:
      tags:
        - project
      description: Delete a logo image for a project
      summary: Delete a logo image for a project
      parameters:
        - $ref: "#/components/parameters/projectId"
      responses:
        200:
          $ref: "#/components/responses/FileDeleteSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/EntityNotFoundError"
  /project/{projectId}/cover:
    post:
      tags:
        - project
      summary: Add a cover image to an existing project
      description: Add a cover image to an existing project, this will overwrite any existing cover image
      parameters:
        - $ref: "#/components/parameters/projectId"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                cover:
                  format: binary
                  description: image file for the cover
              required:
                - cover
      responses:
        200:
          $ref: "#/components/responses/FileUploadSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/EntityNotFoundError"
    delete:
      tags:
        - project
      description: Delete a cover image for a project
      summary: Delete a cover image for a project
      parameters:
        - $ref: "#/components/parameters/projectId"
      responses:
        200:
          $ref: "#/components/responses/FileDeleteSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/EntityNotFoundError"
  /project/{projectId}/gallery:
    post:
      tags:
        - project
      summary: Add an image to the projects gallery
      description: Add an image to the projects gallery along with an optional name and description
      parameters:
        - $ref: "#/components/parameters/projectId"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                gallery:
                  format: binary
                  description: image file for the gallery
                name:
                  format: string
                  description: name that will be displayed for the image
                description:
                  format: string
                  description: description for the image if any
              required:
                - gallery
      responses:
        200:
          $ref: "#/components/responses/FileUploadSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/ProjectNotFoundError"
  /project/{projectId}/gallery/{galleryId}:
    delete:
      tags:
        - project
      summary: Remove a gallery item from the gallery
      description: Remove a gallery item from the gallery
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/galleryId"
      responses:
        200:
          $ref: "#/components/responses/FileUploadSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/ProjectNotFoundError"
  /project/{projectId}/component:
    post:
      tags:
        - component
      summary: Quick add a component for a given project
      description: Quick add a component for a project, this is the initial call that needs to be made in order to add a component in the system.
      parameters:
        - $ref: "#/components/parameters/projectId"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: name of the component
                  example: Mobile project
                summary:
                  type: string
                  description: summary for the component
                  example: Lorem ipsum dolor sit amet, consectetur adipiscing elit
                description:
                  type: string
                  description: long description for the component
                  example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
                categoryId:
                  type: string
                  description: id of the category to which the component belongs
                  example: e140073a-092e-48dd-8159-c0a67b617894
                technologyId:
                  type: array
                  items:
                    type: string
                    example:
                      [
                        e140073a-092e-48dd-8159-c0a67b617894,
                        e140073a-092e-48dd-8159-c0a67b617895,
                      ]
                links:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        description: type of link ie, app store, blog post, article
                        example: blog
                      url:
                        type: string
                        description: url for the link
                        example: https://google.com
                      text:
                        type: string
                        description: Text to display for the link
                        example: Google
              required:
                - name
                - projectId
                - categoryId
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Entity not found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/responses/CategoryNotFoundError"
                  - $ref: "#/components/responses/ProjectNotFoundError"
    get:
      tags:
        - component
      summary: Fetch all components for a project
      description: Fetch all the components that belong to a project
      parameters:
        - $ref: "#/components/parameters/projectId"
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Component"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /project/{projectId}/component/{componentId}:
    put:
      tags:
        - component
      summary: Update contents for a component
      description: Update component attributes excluding cover, logo and gallery. This update will overwrite existing values
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/componentId"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: name of the component
                  example: Mobile project
                summary:
                  type: string
                  description: summary for the component
                  example: Lorem ipsum dolor sit amet, consectetur adipiscing elit
                description:
                  type: string
                  description: long description for the component
                  example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
                categoryId:
                  type: string
                  description: id of the category to which the component belongs
                  example: e140073a-092e-48dd-8159-c0a67b617894
                technologyId:
                  type: array
                  items:
                    type: string
                    example:
                      [
                        e140073a-092e-48dd-8159-c0a67b617894,
                        e140073a-092e-48dd-8159-c0a67b617895,
                      ]
                links:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        description: type of link ie, app store, blog post, article
                        example: blog
                      url:
                        type: string
                        description: url for the link
                        example: https://google.com
                      text:
                        type: string
                        description: Text to display for the link
                        example: Google
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Entity not found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/responses/CategoryNotFoundError"
                  - $ref: "#/components/responses/ProjectNotFoundError"
                  - $ref: "#/components/responses/ComponentNotFoundError"
    get:
      tags:
        - component
      summary: Fetch a single component for a project
      description: Fetch a single component that belongs to a project
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/componentId"
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    $ref: "#/components/schemas/Component"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Entity not found
          $ref: "#/components/responses/ComponentNotFoundError"
  /project/{projectId}/component/{componentId}/cover:
    post:
      tags:
        - component
      summary: Add a cover image to an existing component
      description: Add a cover image to an existing component, this will overwrite any existing cover image
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/componentId"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                cover:
                  format: binary
                  description: image file for the cover
              required:
                - cover
      responses:
        200:
          $ref: "#/components/responses/FileUploadSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/ComponentNotFoundError"
    delete:
      tags:
        - component
      description: Delete a cover image for a component
      summary: Delete a cover image for a component
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/componentId"
      responses:
        200:
          $ref: "#/components/responses/FileDeleteSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/ComponentNotFoundError"
  /project/{projectId}/component/{componentId}/gallery:
    post:
      tags:
        - component
      summary: Add an image to the components gallery
      description: Add an image to the components gallery along with an optional name and description
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/componentId"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                gallery:
                  format: binary
                  description: image file for the gallery
                name:
                  format: string
                  description: name that will be displayed for the image
                description:
                  format: string
                  description: description for the image if any
              required:
                - gallery
      responses:
        200:
          $ref: "#/components/responses/FileUploadSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/ComponentNotFoundError"
  /project/{projectId}/component/{componentId}/gallery/{galleryId}:
    delete:
      tags:
        - component
      summary: Remove a gallery item from the components gallery
      description: Remove a gallery item from the components gallery
      parameters:
        - $ref: "#/components/parameters/projectId"
        - $ref: "#/components/parameters/componentId"
        - $ref: "#/components/parameters/galleryId"
      responses:
        200:
          $ref: "#/components/responses/FileUploadSuccess"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/ComponentNotFoundError"
  /component/select:
    get:
      tags:
        - component
      description: Fetches all components for display in a select. This endpoint is to be used only when displaying data for a select
      summary: Fetches all components for display in a select
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/SelectObject"

        401:
          $ref: "#/components/responses/UnauthorizedError"
  /portfolio:
    post:
      tags:
        - portfolio
      summary: Add a portfolio
      description: Add a portfolio, the id fields in the request body are required but the arrays can be empty. At least 1 array needs to have a value
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  properties:
                    title:
                      type: string
                      description: title for the portfolio
                      example: Mobile project
                    description:
                      type: string
                      description: long description for the portfolio
                      example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
                    componentId:
                      type: array
                      items:
                        type: string
                    technologyId:
                      type: array
                      items:
                        type: string
                    categoryId:
                      type: array
                      items:
                        type: string
                    projectId:
                      type: array
                      items:
                        type: string
                  required:
                    - title
                    - description
                    - componentId
                    - technologyId
                    - categoryId
                    - projectId
              required:
                - payload
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          $ref: "#/components/responses/MissingParametersError"
    get:
      tags:
        - portfolio
      summary: Fetch all portfolios listed
      description: Fetch all portfolios listed in the system
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/PortfolioAll"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /portfolio/{portfolioId}:
    put:
      tags:
        - portfolio
      summary: Update a portfolio
      description: Update a portfolio, the id fields in the request body are required but the arrays can be empty. At least 1 array needs to have a value
      parameters:
        - $ref: "#/components/parameters/portfolioId"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  properties:
                    title:
                      type: string
                      description: title for the portfolio
                      example: Mobile project
                    description:
                      type: string
                      description: long description for the portfolio
                      example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
                    componentId:
                      type: array
                      items:
                        type: string
                    technologyId:
                      type: array
                      items:
                        type: string
                    categoryId:
                      type: array
                      items:
                        type: string
                    projectId:
                      type: array
                      items:
                        type: string
                  required:
                    - title
                    - description
                    - componentId
                    - technologyId
                    - categoryId
                    - projectId
              required:
                - payload
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          $ref: "#/components/responses/MissingParametersError"
    get:
      tags:
        - portfolio
      summary: Fetch a single portfolio
      description: Fetch a single portfolio from the system
      parameters:
        - $ref: "#/components/parameters/portfolioId"
      responses:
        200:
          description: Successful response
          content:
            "application/json":
              schema:
                type: object
                properties:
                  payload:
                    $ref: "#/components/schemas/Portfolio"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - portfolio
      description: Archive a portfolio
      summary: Archives a portfolio
      parameters:
        - $ref: "#/components/parameters/portfolioId"
      responses:
        200:
          $ref: "#/components/responses/InsertUpdateResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/EntityNotFoundError"
